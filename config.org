* Basic Configuration
** No Backups
#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+end_src
** Subword
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src
** Electric
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      (?\" . ?\")
			      (?\' . ?\')
			      ))
  (electric-pair-mode t)
#+end_src
** Scroll conservatively
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src
** No bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
** Highlight selected line
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode t))
#+end_src
** Remove ugly GUI elements
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (setq inhibit-startup-message t)
#+end_src
* Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
* Beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src
* Hungry-Delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
* Sudo-Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+end_src
* Prettify symbols
#+begin_src emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+end_src
* Terminal
** Get Bash terminal by Default
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src
** Shortcut for Terminal
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c t") 'ansi-term)
#+end_src
* Yes-or-No prompt
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Org
** Basic config
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
  (global-set-key (kbd "C-c i") 'org-insert-structure-template)
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
* Ido
** Enable Ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** Ido-Vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** Smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
* Buffers
** Enable Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* Config Edit/Reload
** Edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* Window splitting functions
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

* Convinient functions
* Dashboard
** Enable dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-banner-logo-title "Welcome back, Exy!"))
#+end_src

* Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
